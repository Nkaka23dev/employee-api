//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BenefitSoapService.Client
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Benefit", Namespace="http://benefitsoapservice.com/")]
    public partial class Benefit : object
    {
        
        private decimal CostField;
        
        private string DescriptionField;
        
        private int IdField;
        
        private string NameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Cost
        {
            get
            {
                return this.CostField;
            }
            set
            {
                this.CostField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description
        {
            get
            {
                return this.DescriptionField;
            }
            set
            {
                this.DescriptionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id
        {
            get
            {
                return this.IdField;
            }
            set
            {
                this.IdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://benefitsoapservice.com/", ConfigurationName="BenefitSoapService.Client.IBenefitService")]
    public interface IBenefitService
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://benefitsoapservice.com/IBenefitService/GetBenefitDetails", ReplyAction="http://benefitsoapservice.com/IBenefitService/GetBenefitDetailsResponse")]
        System.Threading.Tasks.Task<BenefitSoapService.Client.Benefit> GetBenefitDetailsAsync(int benefitId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://benefitsoapservice.com/IBenefitService/GetAllBenefits", ReplyAction="http://benefitsoapservice.com/IBenefitService/GetAllBenefitsResponse")]
        System.Threading.Tasks.Task<BenefitSoapService.Client.Benefit[]> GetAllBenefitsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://benefitsoapservice.com/IBenefitService/CreateBenefit", ReplyAction="http://benefitsoapservice.com/IBenefitService/CreateBenefitResponse")]
        System.Threading.Tasks.Task<bool> CreateBenefitAsync(BenefitSoapService.Client.Benefit benefit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://benefitsoapservice.com/IBenefitService/UpdateBenefit", ReplyAction="http://benefitsoapservice.com/IBenefitService/UpdateBenefitResponse")]
        System.Threading.Tasks.Task<bool> UpdateBenefitAsync(BenefitSoapService.Client.Benefit benefit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://benefitsoapservice.com/IBenefitService/DeleteBenefit", ReplyAction="http://benefitsoapservice.com/IBenefitService/DeleteBenefitResponse")]
        System.Threading.Tasks.Task<bool> DeleteBenefitAsync(int benefitId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    public interface IBenefitServiceChannel : BenefitSoapService.Client.IBenefitService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    public partial class BenefitServiceClient : System.ServiceModel.ClientBase<BenefitSoapService.Client.IBenefitService>, BenefitSoapService.Client.IBenefitService
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public BenefitServiceClient() : 
                base(BenefitServiceClient.GetDefaultBinding(), BenefitServiceClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IBenefitService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public BenefitServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(BenefitServiceClient.GetBindingForEndpoint(endpointConfiguration), BenefitServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public BenefitServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(BenefitServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public BenefitServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(BenefitServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public BenefitServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<BenefitSoapService.Client.Benefit> GetBenefitDetailsAsync(int benefitId)
        {
            return base.Channel.GetBenefitDetailsAsync(benefitId);
        }
        
        public System.Threading.Tasks.Task<BenefitSoapService.Client.Benefit[]> GetAllBenefitsAsync()
        {
            return base.Channel.GetAllBenefitsAsync();
        }
        
        public System.Threading.Tasks.Task<bool> CreateBenefitAsync(BenefitSoapService.Client.Benefit benefit)
        {
            return base.Channel.CreateBenefitAsync(benefit);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateBenefitAsync(BenefitSoapService.Client.Benefit benefit)
        {
            return base.Channel.UpdateBenefitAsync(benefit);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteBenefitAsync(int benefitId)
        {
            return base.Channel.DeleteBenefitAsync(benefitId);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        #if !NET6_0_OR_GREATER
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        #endif
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IBenefitService))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IBenefitService))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:5079/BenefitService.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return BenefitServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IBenefitService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return BenefitServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IBenefitService);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IBenefitService,
        }
    }
}
